// This file is auto-generated from auth.ts by generate-schema.ts. Do not edit this file manually.
// To regenerate the schema, run:
// npx tsx generate-schema.ts

import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

const schema = defineSchema({
  user: defineTable({
    name: v.string(),
    email: v.string(),
    emailVerified: v.boolean(),
    image: v.optional(v.string()),
    createdAt: v.number(),
    updatedAt: v.number(),
    twoFactorEnabled: v.optional(v.boolean()),
    isAnonymous: v.optional(v.boolean()),
    username: v.optional(v.string()),
    displayUsername: v.optional(v.string()),
    userId: v.optional(v.string()),
  })
    .index("email_name", ["email","name"])
    .index("name", ["name"])
    .index("userId", ["userId"])
    .index("email", ["email"])
    .index("username", ["username"]),

  session: defineTable({
    expiresAt: v.number(),
    token: v.string(),
    createdAt: v.number(),
    updatedAt: v.number(),
    ipAddress: v.optional(v.string()),
    userAgent: v.optional(v.string()),
    userId: v.string(),
  })
    .index("expiresAt", ["expiresAt"])
    .index("expiresAt_userId", ["expiresAt","userId"])
    .index("token", ["token"])
    .index("userId", ["userId"]),

  account: defineTable({
    accountId: v.string(),
    providerId: v.string(),
    userId: v.string(),
    accessToken: v.optional(v.string()),
    refreshToken: v.optional(v.string()),
    idToken: v.optional(v.string()),
    accessTokenExpiresAt: v.optional(v.number()),
    refreshTokenExpiresAt: v.optional(v.number()),
    scope: v.optional(v.string()),
    password: v.optional(v.string()),
    createdAt: v.number(),
    updatedAt: v.number(),
  })
    .index("accountId", ["accountId"])
    .index("accountId_providerId", ["accountId","providerId"])
    .index("providerId_userId", ["providerId","userId"])
    .index("userId", ["userId"]),

  verification: defineTable({
    identifier: v.string(),
    value: v.string(),
    expiresAt: v.number(),
    createdAt: v.optional(v.number()),
    updatedAt: v.optional(v.number()),
  })
    .index("expiresAt", ["expiresAt"])
    .index("identifier", ["identifier"]),

  twoFactor: defineTable({
    secret: v.string(),
    backupCodes: v.string(),
    userId: v.string(),
  })
    .index("userId", ["userId"]),

  jwks: defineTable({
    publicKey: v.string(),
    privateKey: v.string(),
    createdAt: v.number(),
  }),

  rateLimit: defineTable({
    key: v.optional(v.string()),
    count: v.optional(v.number()),
    lastRequest: v.optional(v.number()),
  })
    .index("key", ["key"]),

});

export default schema;

export const specialFields = {
  user: {
    name: {
      sortable: true
    },
    email: {
      sortable: true,
      unique: true
    },
    username: {
      sortable: true,
      unique: true
    }
  },
  session: {
    token: {
      unique: true
    },
    userId: {
      references: {
        model: "user",
        field: "id",
        onDelete: "cascade"
      }
    }
  },
  account: {
    userId: {
      references: {
        model: "user",
        field: "id",
        onDelete: "cascade"
      }
    }
  },
  twoFactor: {
    userId: {
      references: {
        model: "user",
        field: "id"
      }
    }
  }
};
